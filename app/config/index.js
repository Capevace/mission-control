/**
 * Config Module
 *
 * This module exports the config object.
 * It generates some dynamic parts but should be customizable.
 *
 * @todo  Make it more dynamic by loading a json file.
 *
 * @module @config
 * @since 1.0.0
 * @requires uuid/v4
 */

const fs = require('fs');
const path = require('path');
const uuid = require('uuid/v4');

// We check if session.key file exists in the project root to load the session secret from.
// If not, we generate a new uuid and write it to that location.
let sessionSecret = '';
const sessionSecretPath = path.resolve(__dirname, '../../storage/session.key');
if (fs.existsSync(sessionSecretPath)) {
	sessionSecret = fs.readFileSync(sessionSecretPath).toString();
} else {
	sessionSecret = uuid();

	fs.writeFileSync(sessionSecretPath, sessionSecret);
}

// The JWT secret will not be generated by this script. It is shared with all
// subsystems and thus resides in the project root, placed there on setup.
const jwtSecretPath = path.resolve(__dirname, '../../storage/jwt.key');
if (!fs.existsSync(jwtSecretPath)) {
	throw new Error('No jwt.key file detected in root. This key is required.');
}

/**
 * The config object.
 *
 * Module exports the config object.
 *
 * @type {Object}
 */
module.exports = {
	auth: {
		ssoUrl: 'http://sso.home.mateffy.test:3001',
		jwtSecret: fs.readFileSync(jwtSecretPath),
		issuer: 'sso.home.mateffy.me',
		audience: 'home.mateffy.me',
		socketTimeout: 15000
	},
	http: {
		baseUrl: 'http://home.mateffy.test:3000',
		port: 3000,
		sessionSecret: sessionSecret
	},
	dashboard: {
		publicUiPath: path.resolve(__dirname, '../../../dashboard/public')
	},
	spotify: {
		publicUiPath: path.resolve(__dirname, '../../../spotify-player/dist'),
		apiUrl: 'https://api.spotify.com/v1',
		authUrl: 'https://accounts.spotify.com',
		clientId: 'f1421bd3dada404da546902b6849f2d7',
		clientSecret: '2192e52bff6740cb8dbce0011305bb20',
		scope:
			'user-read-private user-read-email user-read-birthdate user-read-playback-state user-modify-playback-state user-library-read playlist-read-private streaming playlist-modify-public playlist-modify-private user-library-modify ugc-image-upload user-follow-modify user-follow-read'
	},
	ifttt: {
		webhookKey: 'dq0U6fRhl-t35dc_HnDem5'
	},
	storage: {
		path: path.resolve(__dirname, '../../storage'),
		databasePath: path.resolve(__dirname, '../../storage/database.json')
	},
	devices: {
		outlets: {
			'tv-leds': { name: 'TV LEDs' },
			'bed-leds': { name: 'Bed LEDs' }
		}
	}
};
